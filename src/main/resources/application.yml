spring:
  application:
    name: cns-catalog-service
  lifecycle:
    timeout-per-shutdown-phase: 15s     # 15초의 종료기간을 둔다
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000     # 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 5000        # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false                  # 설정 서버 연결 실패를 치명적 오류로 인식 -> retry 작동 활성화를 위한 조건
                                        # production 에서는 해당 값을 true 로 설정
      retry:
        max-attempts: 6                 # 시도의 최대 횟수
        initial-interval: 1000          # 최초 재시도 지연 시간(밀리초)
        max-interval: 2000              # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1                 # 지연 시간 계산 승수
  datasource:                           # PostgreSQL 을 컨테이너로 실행하는 명령어: docker run -d --name polar-postgres -e POSTGRES_USER=user -e POSTGRES_PASSWORD=password -e POSTGRES_DB=polardb_catalog -p 5432:5432 postgres:14.4
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
      connection-timeout: 2000          # 풀에서 연결 객체를 얻기 위해 기다려야 하는 최대 시간 (밀리초)
      maximum-pool-size: 5              # 히카리CP가 풀에 최대한으로 유지할 수 있는 연결 객체의 개수
  security:
    oauth2:
      resourceserver:
        jwt:                            # OAuth2 는 액세스토큰에 대한 데이터 형식을 강제로 규정하지 않기 때문에 어떤 형식을 사용할지 명시적으로 지정해야 한다.
          issuer-uri: http://localhost:8080/realms/PolarBookshop   # 특정 영역에 대한 모든 관련 OAuth2 엔드포인트 정보를 제공하는 키클록 URL

server:
  port: 9001
  shutdown: graceful                    # 우아한 종료 활성화
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always       # 애플리케이션의 상세한 상태 정보
      show-components: always   # 애플리케이션이 사용하는 구성 요소에 대한 정보
      probes:
        enabled: true

polar:
  greeting: Welcome to the local book catalog!